{"version":3,"sources":["components/TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_this$props","this","props","item","onClick","react_default","a","createElement","className","classNames","TodoItem-complete","isComplete","nf-checkedImg-complete","title","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","newItem","todoItems","onKeyUp","bind","assertThisInitialized","onChange","_this2","event","index","indexOf","setState","toConsumableArray","slice","concat","objectSpread","text","target","value","keyCode","trim","_this3","type","placeholder","id","length","map","src_components_TodoItem","key","isClicked","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e2bc2aa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport classNames from \"classnames\";\r\nimport \"./TodoItem.css\";\r\nclass TodoItem extends Component {\r\n   // constructor(){\r\n   //    super();\r\n      \r\n   // }\r\n   render() {\r\n      const { item, onClick } = this.props;\r\n      return ( \r\n         <div className = {classNames('TodoItem', {\r\n            'TodoItem-complete': item.isComplete })} \r\n            onClick={ onClick }\r\n         >\r\n            <div className = {\r\n               classNames('nf-checkedImg',{\r\n                  'nf-checkedImg-complete': item.isComplete\r\n               })\r\n            }> </div>\r\n            <p>{ item.title }</p>\r\n            {\r\n               item.isComplete &&\r\n               <div className=\"title-complete\">\r\n                  (Đã hoàn thành)\r\n               </div>\r\n            }\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\nimport TodoItem from \"./components/TodoItem\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      newItem: '',\n      todoItems:[\n        { title: 'Mai nghỉ học.', isComplete: false},\n        { title: 'Mai đi ăn kem.', isComplete: true},\n        { title: 'Tuần sau đóng tiền học.', isComplete: false},\n        { title: 'Nộp bản sao tốt nghiệp.', isComplete: true}\n      ]\n    }\n    this.onKeyUp = this.onKeyUp.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n  isClicked(item){\n    return (event) =>{\n      const isComplete = item.isComplete;\n      const { todoItems } = this.state;\n      const index = this.state.todoItems.indexOf(item);\n      this.setState({\n          todoItems:[\n            ...todoItems.slice(0, index),\n            {\n              ...item,\n              isComplete: !isComplete\n            },\n            ...todoItems.slice(index + 1)  \n        ]}\n      )\n    }\n  }\n  onKeyUp(event){\n    let text = event.target.value;\n    if(event.keyCode === 13){\n      if(!text) {return};\n      text = text.trim();\n      if(!text) {return};\n      this.setState({\n        newItem: '',\n        todoItems:[\n          {title: text, isComplete: false},\n          ...this.state.todoItems\n        ]\n      })\n      text = '';\n    }else{\n      this.setState({\n        newItem: text\n      });\n    }\n  }\n  onChange(event) {\n      this.setState({\n        newItem: event.target.value\n      });\n  }\n  render() {\n    const { todoItems } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <div className=\"header\">\n            <div className=\"header-img\"></div>\n            <input\n              onChange={this.onChange}\n              value={this.state.newItem}\n              onKeyUp={this.onKeyUp} \n              type=\"text\" \n              placeholder=\"Thêm Công Việc\"\n              id=\"input-text\"/>\n          </div>\n          <div className=\"list-items\">\n            {\n              todoItems.length > 0 &&\n              todoItems.map((item, index) => \n                <TodoItem \n                  item={item}  \n                  key={index} \n                  onClick={this.isClicked(item)}\n                />)\n            }\n            { todoItems.length === 0 && 'Nothing here.' }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}